setwd("C:/Users/vetdd/Documents/NSS_project/metalworkingsolutions-pandas/metal_2merge_DS")
install.packages("shinyjs")
setwd("C:/Users/vetdd/Documents/NSS_project/metalworkingsolutions-pandas/metal_2merge_DS")
install.packages("formattable")
install.packages("reactable")
# Load required libraries
library(DBI)
library(RPostgres)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(bit64)
library(plotly)
library(acepack)
# Establish database connection
con <- dbConnect(RPostgres::Postgres(),
dbname = 'metalworking solution',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'Postgre')
# Execute SQL query to get data
data <- dbGetQuery(con, "
SELECT
EXTRACT(YEAR FROM omp_order_date) AS year,
EXTRACT(MONTH FROM omp_order_date) AS month,
omp_customer_organization_id,
COUNT(omp_sales_order_id) AS NoOfOrder
FROM sales_orders
GROUP BY year, month, omp_customer_organization_id
ORDER BY year, month;
")
# Close the database connection
dbDisconnect(con)
# Explicitly convert integer64 to numeric
data$NoOfOrder <- as.numeric(data$nooforder)
# Add order date
data <- data %>%
mutate(order_date = as.Date(paste(year, month, "01", sep="-")))
# Determine the cohort (first purchase month) for each customer
customer_cohort <- data %>%
group_by(omp_customer_organization_id) %>%
summarise(cohort_month = min(order_date))
# Merge cohort info back with original data
data <- data %>%
left_join(customer_cohort, by = "omp_customer_organization_id")
# Calculate months since first purchase for each record
data <- data %>%
mutate(months_since_first_order = interval(cohort_month, order_date) %/% months(1))
customer_cohort_summary <- data %>%
group_by(omp_customer_organization_id, cohort_month, months_since_first_order) %>%
summarise(total_orders = sum(nooforder), .groups='drop')
# Aggregate and arrange customers by the highest month since first order
customer_cohort_summary <- data %>%
group_by(omp_customer_organization_id, cohort_month, months_since_first_order) %>%
summarise(total_orders = sum(NoOfOrder), .groups='drop') %>%
arrange(desc(months_since_first_order), omp_customer_organization_id) %>%
mutate(customer_index = as.numeric(factor(omp_customer_organization_id, levels = unique(omp_customer_organization_id))))
# Plot interactive heatmap with numeric customer index and clear contrast colors
p_customer <- ggplot(customer_cohort_summary, aes(
x = months_since_first_order,
y = customer_index,
fill = total_orders,
text = paste("Customer Org ID:", omp_customer_organization_id,
"<br>Cohort Month:", cohort_month,
"<br>Months Since First Order:", months_since_first_order,
"<br>Total Orders:", total_orders))) +
geom_tile(color = "gray80") +
scale_fill_distiller(palette = "RdYlBu", direction = -1) +
labs(title = "Customer-Level Cohort Analysis",
x = "Months Since First Order",
y = "Customer",
fill = "Number of Orders") +
theme_minimal() +
theme(axis.text.y = element_text(size=7),
axis.ticks.y = element_line(size=0.2),
panel.grid = element_blank())
# Interactive plot with improved contrast and numeric axis labels
ggplotly(p_customer, tooltip = "text")
last_months_since_first_order <- customer_cohort_summary %>%
group_by(omp_customer_organization_id) %>%
summarise(last_month_since_first_order = max(months_since_first_order), .groups = "drop")
customer_plot_order <- customer_cohort_summary %>%
select(omp_customer_organization_id, customer_index) %>%
distinct() %>%
left_join(company_info, by = "omp_customer_organization_id") %>%
arrange(desc(customer_index))
library(DBI)
library(RPostgres)
library(tidyverse)
con <- dbConnect(Postgres(),
dbname = 'metalworking solution',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'Postgre')
query <- "
WITH first_transaction AS (
SELECT
omp_customer_organization_id,
MIN(omp_order_date) AS first_purchase_date
FROM sales_orders
GROUP BY omp_customer_organization_id
)
SELECT DISTINCT ON (o.omp_customer_organization_id)
EXTRACT(YEAR FROM o.omp_order_date) AS year,
EXTRACT(MONTH FROM o.omp_order_date) AS month,
COUNT(DISTINCT CASE
WHEN DATE_TRUNC('month', f.first_purchase_date) = DATE_TRUNC('month', o.omp_order_date)
THEN o.omp_customer_organization_id
END) AS new_customers,
COUNT(DISTINCT CASE
WHEN DATE_TRUNC('month', f.first_purchase_date) < DATE_TRUNC('month', o.omp_order_date)
THEN o.omp_customer_organization_id
END) AS existing_customers,
COUNT(DISTINCT o.omp_customer_organization_id) AS total_no
FROM sales_orders AS o
JOIN first_transaction AS f
ON o.omp_customer_organization_id = f.omp_customer_organization_id
GROUP BY o.omp_customer_organization_id, year, month
ORDER BY o.omp_customer_organization_id,year, month;
"
customer_data <- dbGetQuery(con, query)
dbDisconnect(con)
customer_data <- customer_data %>%
mutate(date = as.Date(paste(year, month, "01", sep = "-")))
customer_data_long <- customer_data %>%
select(date, new_customers, existing_customers) %>%
tidyr::pivot_longer(cols = c(new_customers, existing_customers),
names_to = "customer_type",
values_to = "count")
# Pivot data to longer format for ggplot
customer_data_percent_long <- customer_data_percent %>%
tidyr::pivot_longer(cols = c(new_customers_pct, existing_customers_pct),
names_to = "customer_type",
values_to = "percentage")
library(DBI)
library(RPostgres)
library(tidyverse)
con <- dbConnect(Postgres(),
dbname = 'metalworking solution',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'Postgre')
query <- "
WITH first_transaction AS (
SELECT
omp_customer_organization_id,
MIN(omp_order_date) AS first_purchase_date
FROM sales_orders
GROUP BY omp_customer_organization_id
)
SELECT DISTINCT ON (o.omp_customer_organization_id)
EXTRACT(YEAR FROM o.omp_order_date) AS year,
EXTRACT(MONTH FROM o.omp_order_date) AS month,
COUNT(DISTINCT CASE
WHEN DATE_TRUNC('month', f.first_purchase_date) = DATE_TRUNC('month', o.omp_order_date)
THEN o.omp_customer_organization_id
END) AS new_customers,
COUNT(DISTINCT CASE
WHEN DATE_TRUNC('month', f.first_purchase_date) < DATE_TRUNC('month', o.omp_order_date)
THEN o.omp_customer_organization_id
END) AS existing_customers,
COUNT(DISTINCT o.omp_customer_organization_id) AS total_no
FROM sales_orders AS o
JOIN first_transaction AS f
ON o.omp_customer_organization_id = f.omp_customer_organization_id
GROUP BY o.omp_customer_organization_id, year, month
ORDER BY o.omp_customer_organization_id,year, month;
"
customer_data <- dbGetQuery(con, query)
dbDisconnect(con)
customer_data <- customer_data %>%
mutate(date = as.Date(paste(year, month, "01", sep = "-")))
customer_data_long <- customer_data %>%
select(date, new_customers, existing_customers) %>%
tidyr::pivot_longer(cols = c(new_customers, existing_customers),
names_to = "customer_type",
values_to = "count")
# Pivot data to longer format for ggplot
customer_data_percent_long <- customer_data_percent %>%
tidyr::pivot_longer(cols = c(new_customers_pct, existing_customers_pct),
names_to = "customer_type",
values_to = "percentage")
library(DBI)
library(RPostgres)
library(tidyverse)
con <- dbConnect(Postgres(),
dbname = 'metalworking solution',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'Postgre')
query <- "
WITH first_transaction AS (
SELECT
omp_customer_organization_id,
MIN(omp_order_date) AS first_purchase_date
FROM sales_orders
GROUP BY omp_customer_organization_id
)
SELECT DISTINCT ON (o.omp_customer_organization_id)
EXTRACT(YEAR FROM o.omp_order_date) AS year,
EXTRACT(MONTH FROM o.omp_order_date) AS month,
COUNT(DISTINCT CASE
WHEN DATE_TRUNC('month', f.first_purchase_date) = DATE_TRUNC('month', o.omp_order_date)
THEN o.omp_customer_organization_id
END) AS new_customers,
COUNT(DISTINCT CASE
WHEN DATE_TRUNC('month', f.first_purchase_date) < DATE_TRUNC('month', o.omp_order_date)
THEN o.omp_customer_organization_id
END) AS existing_customers,
COUNT(DISTINCT o.omp_customer_organization_id) AS total_no
FROM sales_orders AS o
JOIN first_transaction AS f
ON o.omp_customer_organization_id = f.omp_customer_organization_id
GROUP BY o.omp_customer_organization_id, year, month
ORDER BY o.omp_customer_organization_id,year, month;
"
customer_data <- dbGetQuery(con, query)
dbDisconnect(con)
customer_data <- customer_data %>%
mutate(date = as.Date(paste(year, month, "01", sep = "-")))
customer_data_long <- customer_data %>%
select(date, new_customers, existing_customers) %>%
tidyr::pivot_longer(cols = c(new_customers, existing_customers),
names_to = "customer_type",
values_to = "count")
# Pivot data to longer format for ggplot
customer_data_percent_long <- customer_data_percent %>%
tidyr::pivot_longer(cols = c(new_customers_pct, existing_customers_pct),
names_to = "customer_type",
values_to = "percentage")
# Load required libraries
library(DBI)
library(RPostgres)
library(dplyr)
library(tidyr)
library(ggplot2)
library(lubridate)
library(bit64)
library(plotly)
library(acepack)
# Establish database connection
con <- dbConnect(RPostgres::Postgres(),
dbname = 'metalworking solution',
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'Postgre')
# Execute SQL query to get data
data <- dbGetQuery(con, "
SELECT
EXTRACT(YEAR FROM omp_order_date) AS year,
EXTRACT(MONTH FROM omp_order_date) AS month,
omp_customer_organization_id,
COUNT(omp_sales_order_id) AS NoOfOrder
FROM sales_orders
GROUP BY year, month, omp_customer_organization_id
ORDER BY year, month;
")
# Close the database connection
dbDisconnect(con)
# Explicitly convert integer64 to numeric
data$NoOfOrder <- as.numeric(data$nooforder)
# Add order date
data <- data %>%
mutate(order_date = as.Date(paste(year, month, "01", sep="-")))
# Determine the cohort (first purchase month) for each customer
customer_cohort <- data %>%
group_by(omp_customer_organization_id) %>%
summarise(cohort_month = min(order_date))
# Merge cohort info back with original data
data <- data %>%
left_join(customer_cohort, by = "omp_customer_organization_id")
# Calculate months since first purchase for each record
data <- data %>%
mutate(months_since_first_order = interval(cohort_month, order_date) %/% months(1))
customer_cohort_summary <- data %>%
group_by(omp_customer_organization_id, cohort_month, months_since_first_order) %>%
summarise(total_orders = sum(nooforder), .groups='drop')
# Aggregate and arrange customers by the highest month since first order
customer_cohort_summary <- data %>%
group_by(omp_customer_organization_id, cohort_month, months_since_first_order) %>%
summarise(total_orders = sum(NoOfOrder), .groups='drop') %>%
arrange(desc(months_since_first_order), omp_customer_organization_id) %>%
mutate(customer_index = as.numeric(factor(omp_customer_organization_id, levels = unique(omp_customer_organization_id))))
# Plot interactive heatmap with numeric customer index and clear contrast colors
p_customer <- ggplot(customer_cohort_summary, aes(
x = months_since_first_order,
y = customer_index,
fill = total_orders,
text = paste("Customer Org ID:", omp_customer_organization_id,
"<br>Cohort Month:", cohort_month,
"<br>Months Since First Order:", months_since_first_order,
"<br>Total Orders:", total_orders))) +
geom_tile(color = "gray80") +
scale_fill_distiller(palette = "RdYlBu", direction = -1) +
labs(title = "Customer-Level Cohort Analysis",
x = "Months Since First Order",
y = "Customer",
fill = "Number of Orders") +
theme_minimal() +
theme(axis.text.y = element_text(size=7),
axis.ticks.y = element_line(size=0.2),
panel.grid = element_blank())
# Interactive plot with improved contrast and numeric axis labels
ggplotly(p_customer, tooltip = "text")
last_months_since_first_order <- customer_cohort_summary %>%
group_by(omp_customer_organization_id) %>%
summarise(last_month_since_first_order = max(months_since_first_order), .groups = "drop")
customer_plot_order <- customer_cohort_summary %>%
select(omp_customer_organization_id, customer_index) %>%
distinct() %>%
left_join(company_info, by = "omp_customer_organization_id") %>%
arrange(desc(customer_index))
library(DBI)
library(RPostgres)
library(ggplot2)
library(dplyr)
library(treemapify)
# Connect to PostgreSQL Database
con <- dbConnect(RPostgres::Postgres(),
dbname = "metalworking solution",
host = 'localhost',
port = 5432,
user = 'postgres',
password = 'Postgre')
# SQL Query to Get Orders Per Part Type
query <- "
SELECT
s.omp_customer_organization_id AS customer_name,
COUNT(DISTINCT s.omp_sales_order_id) AS NoOfOrder,
j.jmp_part_short_description AS part_type
FROM sales_orders AS s
INNER JOIN jobs AS j ON s.omp_customer_organization_id = j.jmp_customer_organization_id
GROUP BY s.omp_customer_organization_id, j.jmp_part_short_description
HAVING COUNT(DISTINCT s.omp_sales_order_id) = 1
ORDER BY s.omp_customer_organization_id;
"
# Fetch Data from Database
customer_data <- dbGetQuery(con, query)
# Disconnect from Database
dbDisconnect(con)
# Convert to Numeric if Necessary
customer_data_summary <- customer_data %>%
group_by(part_type) %>%
summarise(total_nooforder = sum(nooforder, na.rm = TRUE), .groups = "drop")
# Plot aggregated data
ggplot(customer_data_summary, aes(x = reorder(part_type, total_nooforder), y = total_nooforder, fill = total_nooforder)) +
geom_bar(stat = "identity") +
labs(title = "Part Types Ordered by One-Time Customers",
x = "Part Type",
y = "Number of Orders",
fill = "Number of Orders") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  # Reduce x-axis tick font size
legend.text = element_text(size = 8),  # Reduce legend font size
legend.title = element_text(size = 10)) +  # Adjust legend title size if necessary
scale_fill_gradient(low = "#445162", high = "black")
ggplot(customer_data_summary, aes(area = total_nooforder, fill = part_type, label = part_type)) +
geom_treemap() +
geom_treemap_text(fontface = "bold", colour = "white", place = "centre", grow = TRUE) +
scale_fill_viridis_d() +
labs(title = "Parts Ordered by One-Time Customers") +
theme_minimal()
# Load necessary library
library(ggplot2)
# Read the CSV file
data <- read.csv("02-23-2025.csv")
# Ensure column names are correctly referenced
colnames(data) <- trimws(colnames(data))  # Remove any accidental spaces in column names
# Count occurrences of each race
race_counts <- table(data$Race)
race_df <- as.data.frame(race_counts)
colnames(race_df) <- c("Race", "Count")
# Modify race labels to include count
race_df$Race <- paste0(race_df$Race, " (n=", race_df$Count, ")")
# Create pie chart with updated legend labels
ggplot(race_df, aes(x = "", y = Count, fill = Race)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("")
# Load necessary libraries
library(ggplot2)
# Read the CSV file
data <- read.csv("02-23-2025.csv")
# Ensure column names are correctly referenced
colnames(data) <- trimws(colnames(data))  # Remove any accidental spaces in column names
# Convert Group ID to a factor to avoid numerical label issues
data$Group_ID <- as.factor(data$Group_ID)
# Count occurrences of each Group ID
group_counts <- table(data$Group_ID)
group_df <- as.data.frame(group_counts)
colnames(group_df) <- c("GroupID", "Count")
# Modify Group ID labels to include count for the legend
group_df$Legend_Label <- paste0(group_df$GroupID, " (n=", group_df$Count, ")")
# Create pie chart with updated legend labels
ggplot(group_df, aes(x = "", y = Count, fill = Legend_Label)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void() +
ggtitle("") +
guides(fill = guide_legend(title = ""))
setwd("C:/Users/vetdd/Documents/NSS_project/metalworkingsolutions-pandas/app_DS")
setwd("C:/Users/vetdd/Documents/NSS_project/metalworkingsolutions-pandas/app_DS")
